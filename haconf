#!/bin/bash
#
# Provides:             haconf
# Short-Description:    control extended configurations files for haproxy
# Description:          control extended configurations files for haproxy

######################## GLOBAL FUNCTIONS
#S_TRACE=debug

S_GLOBAL_FUNCTIONS="${S_GLOBAL_FUNCTIONS:-/usr/local/bs/inc-functions}"
! . "${S_GLOBAL_FUNCTIONS}" && echo -e "[error] - Unable to source file '${S_GLOBAL_FUNCTIONS}' from '${BASH_SOURCE[0]}'" && exit 1

########################  VARIABLES

usage="haconf, control extended configurations files for haproxy
haconf -h, --help

For the optionnal arguments NAME, you can use the wildcard for the name
	or alone for all selection.
	without agument NAME command return a global selection without filter.

options:
    -h, --help			print usage of this command
    -q, --quiet		Don't show any infomations except errors
    -d, --debug		output debugging in screen & file

	check				check all the enabled configuration files
	reload				reload the haproxy daemon

    clear						clear all broken links of configurations
    list <names>			return a list of 'enabled / disabled / broken' configurations
    enable <names>	enable disabled configuration names
    								& print a list of 'enabled / enable' configurations
    disable <names>	disable an enabled configuration
    								& print a list of 'disabled / enable' configurations
    <names> are an expansion format
"

########################  FUNCTION

# check enabled configuration files
__check() {
	_echod "${FUNCNAME}::${LINENO} IN \$@=$@"

	local configs conf
	configs=

	for conf in $(ls ${path_enabled}/* 2>/dev/null); do
		configs+=" -f ${conf}"
	done;

	if msg=`haproxy -c -f /etc/haproxy/haproxy.cfg ${configs} 2>&1`; then
		_echo 'OK'
	else
		_echoE 'KO'
		_echo "${msg}"
		_exit 1
	fi
}

# clear broken links for names of available configuration
__clear() {
	_echod "${FUNCNAME}::${LINENO} IN \$@=$@"

	local confs

	confs="$(find -L ${path_enabled}/ -type l|sort|sed "s|${path_enabled}/||")"
	_evalq "find -L ${path_enabled}/ -type l -exec rm {} \\;"

	[ "$confs" ] && _echo "The following broken links are deleted:\n$confs"
}

__print() {
	_echod "${FUNCNAME}::${LINENO} IN \$@=$@"

	local conf enabled disabled

	# enabled
	enabled="$(find -L ${path_enabled}/ -type f|sort|sed "s|${path_enabled}/||")"

	# disabled
	disabled="$(ls "${path_available}")"
    for conf in ${enabled}; do
    	disabled="${disabled/$conf}"
    done
	disabled="$(echo -e "${disabled}"|sort -u|sed '/^$/d')"
	_echod "${FUNCNAME}::${LINENO} enabled=${enabled}"
	_echod "${FUNCNAME}::${LINENO} disabled=${disabled}"

	#paste <(echo -e "--${1}--\n${ok}") <(echo -e "--enabled--\n${enabled}") <(echo -e "--disabled--\n${disabled}")|column -tn
	#[ "${ok}" ] && echo -e "\nTo activate the new configuration, use 'haconf reload'"
	echo -e "${1}  \t"${ok%\\n}
	echo -e "enabled \t"${enabled}
	echo -e "disabled\t"${disabled}
	[ "${ok}" ] && echo -e "\nTo activate the new configuration, use 'haconf reload'"
}

# 1 path to list
# s-@ names to search
__get_confs() {
	_echod "${FUNCNAME}::${LINENO} IN \$@=$@"

	local path confs conf
	path="$1"
	shift
	_echod "${FUNCNAME}::${LINENO} path=${path} \$@=$@"

	# list confs
	for conf in $@; do
		confs="${confs}
$(ls -1 "${path}"/${conf} 2>/dev/null)"
	done
	echo -e "$confs"|sort -u|sed "s|${path}/||"|xargs
}

# enable configuration files with his short names (without extension)
# $* : configuration names
__enable() {
	_echod "${FUNCNAME}::${LINENO} IN \$@=$@"

	local conf confs enabled ok ko

	confs="$(__get_confs "${path_available}" "$@")"
	_echod "${FUNCNAME}::${LINENO} confs="${confs}

	# select confs
	for conf in ${confs}; do
	    [ -h "${path_enabled}/${conf}" ]  && _evalq rm "${path_enabled}/${conf}"
	    _evalq ln -s ${path_available}/${conf} ${path_enabled}/${conf}
	    ok="${ok}${conf}\n"
	done

	__print "enable "
}

# disable configuration files with his short names (without extension)
# $* : configuration names
__disable() {
	_echod "${FUNCNAME}::${LINENO} IN \$@=$@"

	local conf confs enabled ok ko

	confs="$(__get_confs "${path_available}" "$@")"
	_echod "${FUNCNAME}::${LINENO} confs="${confs}

	# select confs
	for conf in ${confs}; do
		if [ -e "${path_enabled}/${conf}" ]; then
			_evalq rm ${path_enabled}/${conf}
			ok="${ok}${conf}\n"
		fi
	done

	__print "disable"
}

# print list names of available configuration
__list() {
	_echod "${FUNCNAME}::${LINENO} IN \$@=$@"

	local enabled disabled ko conf

	# select confs
	if [ -z $@ ]; then
		disabled="$(ls "${path_available}")"
		enabled="$(find -L "${path_enabled}"/ -type f|sort|sed "s|${path_enabled}/||")"
		ko="$(find -L "${path_enabled}"/ -type l|sort|sed "s|${path_enabled}/||")"
	else
		# select confs
		for conf in $@; do
			disabled+="\n$(find ${path_available}/ -type f -name ${conf}|sort|sed "s|${path_available}/||")"
			enabled+="\n$(find -L ${path_enabled}/ -type f -name ${conf}|sort|sed "s|${path_enabled}/||")"
			ko+="\n$(find -L ${path_enabled}/ -type l -name ${conf}|sort|sed "s|${path_enabled}/||")"
		done
	fi

	# disabled
    for conf in ${enabled}; do
    	disabled="${disabled/$conf}"
    done
	disabled="$(echo -e "${disabled}"|sort -u|sed '/^$/d')"
	enabled="$(echo -e "${enabled}"|sort -u|sed '/^$/d')"
	ko="$(echo -e "${ko}"|sort -u|sed '/^$/d')"

	echo -e "enabled \t"${enabled}
	echo -e "disabled\t"${disabled}
	[ "${ko}" ] && echo -e "broken  \t"${ko} && echo -e "\nTo clean broken links, use: 'haconf clear'"
}

# reload haproxy daemon
__reload() {
	_echod "${FUNCNAME}::${LINENO} IN \$@=$@"

	_service reload haproxy && _echo "haproxy have been reloaded" || _echoE "error, something wrong"
}

__opts() {
	_echod "${FUNCNAME}::${LINENO} IN \$@=$@"

	opts_short="hdq"
	opts_long="help,debug,quiet"
	opts=$(getopt -o ${opts_short} -l ${opts_long} -n "${0##*/}" -- "$@") || _exite "Wrong or missing options"
	eval set -- "${opts}"

	_echod "${FUNCNAME}::${LINENO} opts=${opts}"
	while [ "$1" != "--" ]; do
		case "$1" in
			--help)
				echo "${usage}" && exit
				;;
			-q|--quiet)
				_redirect quiet
				;;
			-d|--debug)
				_redirect debug
				;;
		esac
		shift
	done

	shift
	action="$1"
	shift
	opts="$@"
	_echod "${FUNCNAME}::${LINENO} action='${action}' opts='${opts}'"
}

__main() {
	_echod "======================================================"
	_echod "$(ps -o args= ${PPID})"
	local opts_short opts_long opts
	local path_available path_enabled path
	path_enabled="/etc/haproxy/conf-enabled"
	path_available="/etc/haproxy/conf-available"

	! type haproxy &>/dev/null && _exite "Haproxy are not installed !"

	for path in "${path_enabled}" "${path_available}"; do
		! [ -d "${path}" ] && mkdir -p "${path}"
	done

	__opts "$@"

	[ -z "${action}" ] && _exite "You have to give an action to execute"
	if ! [ -d "${path_available}" ] || ! [ -d "${path_enabled}" ]; then _exite "Unable to find path ${path_available} or ${path_enabled}"; fi

	if [[ " check clear enable disable list reload " = *" $action "* ]]; then
		# call action with arguments
		__$action "${opts}"
	else
		_exite "Wrong action: '$action'. select in: check clear enable disable list reload"
	fi
}

########################  MAIN

__main "$@"
